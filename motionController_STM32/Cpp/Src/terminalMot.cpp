//$file${.::terminalMot.cpp} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: MotionController.qm
// File:  ${.::terminalMot.cpp}
//
// This code has been generated by QM 7.0.0 <www.state-machine.com/qm>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// Copyright (c) 2005 Quantum Leaps, LLC. All rights reserved.
//
//                 ____________________________________
//                /                                   /
//               /    GGGGGGG    PPPPPPPP   LL       /
//              /   GG     GG   PP     PP  LL       /
//             /   GG          PP     PP  LL       /
//            /   GG   GGGGG  PPPPPPPP   LL       /
//           /   GG      GG  PP         LL       /
//          /     GGGGGGG   PP         LLLLLLL  /
//         /___________________________________/
//
// SPDX-License-Identifier: GPL-3.0-or-later
//
// This generated code is open-source software licensed under the GNU
// General Public License (GPL) as published by the Free Software Foundation
// (see <https://www.gnu.org/licenses>).
//
// NOTE:
// The GPL does NOT permit the incorporation of this code into proprietary
// programs. Please contact Quantum Leaps for commercial licensing options,
// which expressly supersede the GPL and are designed explicitly for
// closed-source distribution.
//
// Quantum Leaps contact information:
// <www.state-machine.com/licensing>
// <info@state-machine.com>
//
//$endhead${.::terminalMot.cpp} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#include "qpcpp.hpp"             // QP/C++ real-time embedded framework
#include "common.hpp"            // DPP Application interface
#include "terminal.hpp"          // Base class for TerminalDpp
#include "bsp.hpp"               // Board Support Package

//$declare${AOs::TerminalMot} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
namespace APP {

//${AOs::TerminalMot} ........................................................
class TerminalMot : public APP::Terminal {
public:
    static TerminalMot inst;
    int m_defined;
    std::uint16_t m_motorPosition;
    std::uint16_t m_knobPosition;

public:
    TerminalMot();
    void DispatchCommand(char command) override;
    void RotateKnobCW();
    void RotateKnobCCW();
}; // class TerminalMot

} // namespace APP
//$enddecl${AOs::TerminalMot} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

//----------------------------------------------------------------------------
//$skip${QP_VERSION} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
// Check for the minimum required QP version
#if (QP_VERSION < 730U) || (QP_VERSION != ((QP_RELEASE^4294967295U)%0x2710U))
#error qpcpp version 7.3.0 or higher required
#endif
//$endskip${QP_VERSION} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//$define${Shared::AO_TerminalMot} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
namespace APP {

//${Shared::AO_TerminalMot} ..................................................
QP::QActive * const AO_TerminalMot = &TerminalMot::inst;

} // namespace APP
//$enddef${Shared::AO_TerminalMot} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//$define${AOs::TerminalMot} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
namespace APP {

//${AOs::TerminalMot} ........................................................
TerminalMot TerminalMot::inst;

//${AOs::TerminalMot::TerminalMot} ...........................................
TerminalMot::TerminalMot()
  : m_defined(1)
{}

//${AOs::TerminalMot::DispatchCommand} .......................................
void TerminalMot::DispatchCommand(char command) {
    // Read the incoming byte
    // Notify App if ped event selected.
    MoveEvt *pe = 0;
    KnobEvt *ke = 0;

    switch ( command ) {
        case 'f':
        case 'F':
            pe = Q_NEW(MoveEvt, FIND_LIMIT_SIG);
            pe->position = -4000;
            AO_MotionMgr->POST(pe, this);
            break;
        case 'h':
        case 'H':
            pe = Q_NEW(MoveEvt, HOME_SIG);
            AO_MotionMgr->POST(pe, this);
            break;
        case 'm':
        case 'M':
            pe = Q_NEW(MoveEvt, MOVE_SIG);
            pe->position = 1000;
            AO_Motor->POST(pe, this);
            break;
        case 'k':
        case 'K':
            RotateKnobCW();
            ke = Q_NEW(KnobEvt, KNOB_SIG);
            ke->position = m_knobPosition;
            AO_Knob->POST(ke, this);
            break;
        case 'j':
        case 'J':
            RotateKnobCCW();
            ke = Q_NEW(KnobEvt, KNOB_SIG);
            ke->position = m_knobPosition;
            AO_Knob->POST(ke, this);
            break;
        case 's':
        case 'S':
            pe = Q_NEW(MoveEvt, STOP_SIG);
            AO_Motor->POST(pe, this);
            break;
        case 'u':
        case 'U':
    #ifndef USE_PUBLISH
            pe = Q_NEW(MoveEvt, SHOW_STATE_SIG);
            AO_Motor->POST(pe, this);
            ke = Q_NEW(KnobEvt, SHOW_STATE_SIG);
            AO_Knob->POST(ke, this);
    #else
            pe = Q_NEW(MoveEvt, SHOW_STATE_SIG);
            QP::QActive::PUBLISH(pe, this);
    #endif
            break;
        case '+':
            m_motorPosition += 1000;
            pe = Q_NEW(MoveEvt, MOVE_SIG);
            pe->position = m_motorPosition;
            AO_Motor->POST(pe, this);
            break;
        case '-':
            m_motorPosition -= 1000;
            pe = Q_NEW(MoveEvt, MOVE_SIG);
            pe->position = m_motorPosition;
            AO_Motor->POST(pe, this);
            break;
    }
}

//${AOs::TerminalMot::RotateKnobCW} ..........................................
void TerminalMot::RotateKnobCW() {
    m_knobPosition += 1;
}

//${AOs::TerminalMot::RotateKnobCCW} .........................................
void TerminalMot::RotateKnobCCW() {
    m_knobPosition -= 1;
}

} // namespace APP
//$enddef${AOs::TerminalMot} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
