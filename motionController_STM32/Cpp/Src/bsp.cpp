//$file${.::bsp.cpp} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: MotionController.qm
// File:  ${.::bsp.cpp}
//
// This code has been generated by QM 7.0.0 <www.state-machine.com/qm>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// Copyright (c) 2005 Quantum Leaps, LLC. All rights reserved.
//
//                 ____________________________________
//                /                                   /
//               /    GGGGGGG    PPPPPPPP   LL       /
//              /   GG     GG   PP     PP  LL       /
//             /   GG          PP     PP  LL       /
//            /   GG   GGGGG  PPPPPPPP   LL       /
//           /   GG      GG  PP         LL       /
//          /     GGGGGGG   PP         LLLLLLL  /
//         /___________________________________/
//
// SPDX-License-Identifier: GPL-3.0-or-later
//
// This generated code is open-source software licensed under the GNU
// General Public License (GPL) as published by the Free Software Foundation
// (see <https://www.gnu.org/licenses>).
//
// NOTE:
// The GPL does NOT permit the incorporation of this code into proprietary
// programs. Please contact Quantum Leaps for commercial licensing options,
// which expressly supersede the GPL and are designed explicitly for
// closed-source distribution.
//
// Quantum Leaps contact information:
// <www.state-machine.com/licensing>
// <info@state-machine.com>
//
//$endhead${.::bsp.cpp} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Board Support Package implementation for desktop OS (Windows, Linux, MacOS)
#if 1
#include "qpcpp.hpp"    // QP/C real-time embedded framework
#include "common.hpp"
#include "main.h"
#include "console.h"
#include "QFsys.h"
#include "bsp.hpp"    // Board Support Package interface
#include "motion.h"

#define TIMER_ONE_ISR
#define TIMER_SCALAR 1
#define KNOB_MAX 20

//============================================================================
namespace { // unnamed namespace for local stuff with internal linkage

Q_DEFINE_THIS_FILE


} // unnamed namespace

//============================================================================
// Error handler

extern "C" {

Q_NORETURN Q_onError(char const * const module, int_t const id) {
    QS_ASSERTION(module, id, 10000U); // report assertion to QS
    consoleDisplayArgs("ERROR in %s:%d\r\n", module, id);
    QP::QF::onCleanup();
    //QS_EXIT();
    //exit(-1);
}
//............................................................................
void assert_failed(char const * const module, int_t const id); // prototype
void assert_failed(char const * const module, int_t const id) {
    Q_onError(module, id);
}

} // extern "C"

//============================================================================
namespace BSP {

//............................................................................
void init() {
    // NOTE: SystemInit() has been already called from the HAL startup code
    // but SystemCoreClock needs to be updated
    SystemCoreClockUpdate();

#if 0
    if (!QS_INIT(argc > 1 ? argv[1] : nullptr)) {
        Q_ERROR();
    }
#endif
}
//............................................................................
void start() {
    // initialize event pools
    consoleDisplay("App starting");

    const int numActors = 6;
    static QF_MPOOL_EL(APP::MoveErrorEvt) smlPoolSto[2*numActors];
    QP::QF::poolInit(smlPoolSto, sizeof(smlPoolSto), sizeof(smlPoolSto[0]));

    // start AOs... QV kernel bare metal, no threads
    APP::ClientEvt *mySwitchEvt = Q_NEW(APP::ClientEvt, APP::CLIENT_SIG);
    mySwitchEvt->client = APP::AO_Motor;
    static QP::QEvt const *switchQueueSto[numActors];
    APP::AO_Switch->start(
        1U,                       // QP prio. of the AO
        switchQueueSto,           // event queue storage
        Q_DIM(switchQueueSto),    // queue length [events]
        nullptr, 0U,              // no stack storage
        mySwitchEvt);             // attach switch client

    APP::ClientEvt *myMotorEvt = Q_NEW(APP::ClientEvt, APP::CLIENT_SIG);
    myMotorEvt->client = APP::AO_MotionMgr;
    static QP::QEvt const *motorQueueSto[numActors];
    APP::AO_Motor->start(
        2U,                          // QP prio. of the AO
        motorQueueSto,               // event queue storage
        Q_DIM(motorQueueSto),        // queue length [events]
        nullptr, 0U,                 // no stack storage
        myMotorEvt);                     // attach motor client

    APP::ClientEvt *myMotionEvt = Q_NEW(APP::ClientEvt, APP::CLIENT_SIG);
    myMotionEvt->client = APP::AO_Motor;
    static QP::QEvt const *motionMgrQueueSto[numActors];
    APP::AO_MotionMgr->start(
        3U,                        // QP prio. of the AO
        motionMgrQueueSto,         // event queue storage
        Q_DIM(motionMgrQueueSto),  // queue length [events]
        nullptr, 0U,               // no stack storage
        myMotionEvt);

    APP::ClientEvt *myKnobEvt = Q_NEW(APP::ClientEvt, APP::CLIENT_SIG);
    myKnobEvt->client = APP::AO_MotionMgr;
    static QP::QEvt const *knobQueueSto[numActors];
    APP::AO_Knob->start(
        4U,                         // QP prio. of the AO
        knobQueueSto,               // event queue storage
        Q_DIM(knobQueueSto),        // queue length [events]
        nullptr, 0U,                // no stack storage
        myKnobEvt);                 // attach switch client

    APP::ClientEvt *myMotionMgrEvt = Q_NEW(APP::ClientEvt, APP::CLIENT_SIG);
    myMotionMgrEvt->client = APP::AO_MotionMgr;
    static QP::QEvtPtr terminalQueueSto[numActors];
    APP::AO_TerminalMot->start(
        5U,                          // QP prio. of the AO
        terminalQueueSto,            // event queue storage
        Q_DIM(terminalQueueSto),     // queue length [events]
        nullptr, 0U,                 // no stack storage
        myMotionMgrEvt);             // attach client

    consoleDisplay("App started\r\n");
}
//............................................................................
void displayPaused(uint8_t paused) {
    consoleDisplayArgs("Paused is %s\n", paused ? "ON" : "OFF");
}
#if 0
//............................................................................
std::uint32_t random() { // a very cheap pseudo-random-number generator
    // "Super-Duper" Linear Congruential Generator (LCG)
    // LCG(2^32, 3*7*11*13*23, 0, seed)
    //
    std::uint32_t rnd = l_rnd * (3U*7U*11U*13U*23U);
    l_rnd = rnd; // set for the next time

    return (rnd >> 8);
}
//............................................................................
void randomSeed(std::uint32_t seed) {
    l_rnd = seed;
}
#endif
//............................................................................
void terminate(std::int16_t result) {
    Q_UNUSED_PAR(result);
    QP::QF::stop();
}

} // namespace BSP

void Q_SysTick_Handler(void); // prototype
void Q_SysTick_Handler(void) {

    QP::QTimeEvt::TICK_X(0U, &l_SysTick_Handler); // time events at rate 0

    QV_ARM_ERRATUM_838869();
}
//============================================================================
namespace QP {

//............................................................................
void QF::onStartup() {
    consoleInit();
    // set up the SysTick timer to fire at BSP::TICKS_PER_SEC rate
    SysTick_Config(SystemCoreClock / BSP::TICKS_PER_SEC);
}
//............................................................................
void QF::onCleanup() {
    consoleDisplayArgs("\r\n%s\r\n", "Bye! Bye!");
}

void QV::onIdle() { // CAUTION: called with interrupts DISABLED, see NOTE0

    // toggle an LED on and then off (not enough LEDs, see NOTE02)
    QF_INT_DISABLE();

#ifdef Q_SPY
    QF_INT_ENABLE();
    QS::rxParse();  // parse all the received bytes

    if ((USART2->SR & USART_FLAG_TXE) != 0) { // TXE empty?
        QF_INT_DISABLE();
        std::uint16_t b = QS::getByte();
        QF_INT_ENABLE();

        if (b != QS_EOD) {  // not End-Of-Data?
            USART2->DR = b; // put into the DR register
        }
    }
#elif defined NDEBUG
    // Put the CPU and peripherals to the low-power mode.
    // you might need to customize the clock management for your application,
    // see the datasheet for your particular Cortex-M MCU.
    QV_CPU_SLEEP(); // atomically go to sleep and enable interrupts
#else
    QF_INT_ENABLE(); // just enable interrupts
    // g_sysAppInterrupt is set by events in QP indicating system state
    // has changed and the ready queue must be re-examined for active objects
    // ready to run. Continually disabling and enabling interrupts is
    // very inefficient and interferes with the event loop.
    while ( !QF_getSysAppEvent() ) {}
    QF_clearSysAppEvent();
#endif
}

//............................................................................

#ifdef Q_SPY

//............................................................................
void QS::onCommand(std::uint8_t cmdId, std::uint32_t param1,
                   std::uint32_t param2, std::uint32_t param3)
{
    Q_UNUSED_PAR(cmdId);
    Q_UNUSED_PAR(param1);
    Q_UNUSED_PAR(param2);
    Q_UNUSED_PAR(param3);
}

#endif // Q_SPY

} // namespace QP
#endif
