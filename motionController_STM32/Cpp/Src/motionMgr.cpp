//$file${.::motionMgr.cpp} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: MotionController.qm
// File:  ${.::motionMgr.cpp}
//
// This code has been generated by QM 7.0.0 <www.state-machine.com/qm>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// Copyright (c) 2005 Quantum Leaps, LLC. All rights reserved.
//
//                 ____________________________________
//                /                                   /
//               /    GGGGGGG    PPPPPPPP   LL       /
//              /   GG     GG   PP     PP  LL       /
//             /   GG          PP     PP  LL       /
//            /   GG   GGGGG  PPPPPPPP   LL       /
//           /   GG      GG  PP         LL       /
//          /     GGGGGGG   PP         LLLLLLL  /
//         /___________________________________/
//
// SPDX-License-Identifier: GPL-3.0-or-later
//
// This generated code is open-source software licensed under the GNU
// General Public License (GPL) as published by the Free Software Foundation
// (see <https://www.gnu.org/licenses>).
//
// NOTE:
// The GPL does NOT permit the incorporation of this code into proprietary
// programs. Please contact Quantum Leaps for commercial licensing options,
// which expressly supersede the GPL and are designed explicitly for
// closed-source distribution.
//
// Quantum Leaps contact information:
// <www.state-machine.com/licensing>
// <info@state-machine.com>
//
//$endhead${.::motionMgr.cpp} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#include "qpcpp.hpp"             // QP/C++ real-time embedded framework
#include "bsp.hpp"               // Board Support Package

#include "common.hpp"
#include "motionMgr.hpp"
#include "console.h"

// ask QM to declare the Motor class
//$skip${QP_VERSION} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
// Check for the minimum required QP version
#if (QP_VERSION < 730U) || (QP_VERSION != ((QP_RELEASE^4294967295U)%0x2710U))
#error qpcpp version 7.3.0 or higher required
#endif
//$endskip${QP_VERSION} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//$define${Shared::AO_MotionMgr} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
namespace APP {

//${Shared::AO_MotionMgr} ....................................................
QP::QActive * const AO_MotionMgr = &MotionMgr::inst;

} // namespace APP
//$enddef${Shared::AO_MotionMgr} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//$define${AOs::MotionMgr} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
namespace APP {

//${AOs::MotionMgr} ..........................................................
MotionMgr MotionMgr::inst;

//${AOs::MotionMgr::SendMoveEvent} ...........................................
void MotionMgr::SendMoveEvent(uint16_t position) {
    // Request new motor postiion
    MoveEvt *myEvt = Q_NEW(MoveEvt, MOVE_SIG);
    myEvt->position = position;
    APP::AO_Motor->POST(myEvt, this);
}

//${AOs::MotionMgr::SendFindLimitEvent} ......................................
void MotionMgr::SendFindLimitEvent() {
    // Request new motor postiion
    MoveEvt *myEvt = Q_NEW(MoveEvt, FIND_LIMIT_SIG);
    myEvt->position = -4000;
    //AO_Motor->Post(myEvt, this);
    APP::AO_Motor->POST(myEvt, this);
}

//${AOs::MotionMgr::MotionMgr} ...............................................
MotionMgr::MotionMgr()
  : QActive(Q_STATE_CAST(&initial))
{
    m_requestPosition = 0;
    m_currentPosition = 0;
    m_motorIncrement = 400;
    m_knobPosition = 0;
}

//${AOs::MotionMgr::SM} ......................................................
Q_STATE_DEF(MotionMgr, initial) {
    //${AOs::MotionMgr::SM::initial}
    //(void)par; // unused parameter
    consoleDisplay("MotionMgr: starting\r\n");
    return tran(&idle);
}

//${AOs::MotionMgr::SM::idle} ................................................
Q_STATE_DEF(MotionMgr, idle) {
    QP::QState status_;
    switch (e->sig) {
        //${AOs::MotionMgr::SM::idle}
        case Q_ENTRY_SIG: {
            consoleDisplay("MotionMgr: idle\r\n");
            status_ = Q_RET_HANDLED;
            break;
        }
        //${AOs::MotionMgr::SM::idle::HOME}
        case HOME_SIG: {
            // Send HOME event to initialize system
            consoleDisplay("MotionMgr: homing motor\r\n");
            SendFindLimitEvent();
            status_ = tran(&moving);
            break;
        }
        //${AOs::MotionMgr::SM::idle::KNOB}
        case KNOB_SIG: {
            // Received event for knob position
            // Increment motor position by motorIncrement attr for each knob position.
            int8_t knobPosition = Q_EVT_CAST(KnobEvt)->position;
            //${AOs::MotionMgr::SM::idle::KNOB::[KnobChanged]}
            if (knobPosition != m_knobPosition) {
                // Knob position changed, determine new motor position
                int knobIncrement = knobPosition - m_knobPosition;
                int positionIncrement = knobIncrement * m_motorIncrement;
                int newPosition = m_currentPosition + positionIncrement;

                m_requestPosition = newPosition;
                consoleDisplayArgs("MotionMgr: knob position = %d\r\n", knobPosition);
                consoleDisplayArgs("MotionMgr: requested motor position = %d\r\n", newPosition);
                m_knobPosition = knobPosition;

                SendMoveEvent(newPosition);
                status_ = tran(&moving);
            }
            else {
                status_ = Q_RET_UNHANDLED;
            }
            break;
        }
        default: {
            status_ = super(&top);
            break;
        }
    }
    return status_;
}

//${AOs::MotionMgr::SM::moving} ..............................................
Q_STATE_DEF(MotionMgr, moving) {
    QP::QState status_;
    switch (e->sig) {
        //${AOs::MotionMgr::SM::moving::MOVED}
        case MOVED_SIG: {
            // Received event from motor
            int16_t position = Q_EVT_CAST(MovedEvt)->position;
            m_currentPosition = position;
            consoleDisplayArgs("MotionMgr: motor position = %d\r\n", position);
            status_ = tran(&idle);
            break;
        }
        //${AOs::MotionMgr::SM::moving::MOVE_ERROR}
        case MOVE_ERROR_SIG: {
            // Received event from motor
            int16_t position = Q_EVT_CAST(MoveErrorEvt)->position;
            uint8_t error = Q_EVT_CAST(MoveErrorEvt)->error;
            m_currentPosition = position;
            consoleDisplayArgs("MotionMgr: motor position = %d, error = %d\r\n",
                                position, error);
            status_ = tran(&idle);
            break;
        }
        default: {
            status_ = super(&top);
            break;
        }
    }
    return status_;
}

} // namespace APP
//$enddef${AOs::MotionMgr} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
