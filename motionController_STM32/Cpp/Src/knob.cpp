//$file${.::knob.cpp} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: MotionController.qm
// File:  ${.::knob.cpp}
//
// This code has been generated by QM 7.0.0 <www.state-machine.com/qm>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// Copyright (c) 2005 Quantum Leaps, LLC. All rights reserved.
//
//                 ____________________________________
//                /                                   /
//               /    GGGGGGG    PPPPPPPP   LL       /
//              /   GG     GG   PP     PP  LL       /
//             /   GG          PP     PP  LL       /
//            /   GG   GGGGG  PPPPPPPP   LL       /
//           /   GG      GG  PP         LL       /
//          /     GGGGGGG   PP         LLLLLLL  /
//         /___________________________________/
//
// SPDX-License-Identifier: GPL-3.0-or-later
//
// This generated code is open-source software licensed under the GNU
// General Public License (GPL) as published by the Free Software Foundation
// (see <https://www.gnu.org/licenses>).
//
// NOTE:
// The GPL does NOT permit the incorporation of this code into proprietary
// programs. Please contact Quantum Leaps for commercial licensing options,
// which expressly supersede the GPL and are designed explicitly for
// closed-source distribution.
//
// Quantum Leaps contact information:
// <www.state-machine.com/licensing>
// <info@state-machine.com>
//
//$endhead${.::knob.cpp} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#include "qpcpp.hpp"        // QP/C++ real-time embedded framework
#include "bsp.hpp"          // Board Support Package

#include "common.hpp"
#include "console.h"
#include "motion.h"
#include "digitalOut.hpp"
#include "knob.hpp"
//#include "motion.h"

#define GREEN_LED kDigitalPin13

// ask QM to define the Knob class
//$skip${QP_VERSION} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
// Check for the minimum required QP version
#if (QP_VERSION < 730U) || (QP_VERSION != ((QP_RELEASE^4294967295U)%0x2710U))
#error qpcpp version 7.3.0 or higher required
#endif
//$endskip${QP_VERSION} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//$define${Shared::AO_Knob} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
namespace APP {

//${Shared::AO_Knob} .........................................................
QP::QActive * const AO_Knob = &Knob::inst;

} // namespace APP
//$enddef${Shared::AO_Knob} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//$define${AOs::Knob} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
namespace APP {

//${AOs::Knob} ...............................................................
Knob Knob::inst;

//${AOs::Knob::CreatePeriodicTimer} ..........................................
void Knob::CreatePeriodicTimer(uint32_t time) {
    //QTimeEvt_ctorX(&me->timeEvt, &me->super, UPDATE_TIME_SIG, 0U);
    //QTimeEvt_armX(&me->timeEvt, time, time);
    m_timeEvt.armX(time, time);
}

//${AOs::Knob::SendKnobEvent} ................................................
void Knob::SendKnobEvent(uint16_t position) {
    // Send new knob postiion
    KnobEvt *pEvt = Q_NEW(KnobEvt, KNOB_SIG);
    pEvt->position = position;
    m_AO_Client->POST(pEvt, this);
}

//${AOs::Knob::CheckKnobChanged} .............................................
std::uint8_t Knob::CheckKnobChanged() {
    std::uint8_t knobChanged = 0;

    // Test for knob position changed
    if ( m_position != m_lastPosition )
    {
        m_lastPosition = m_position;
        consoleDisplayArgs("Knob: notify, new position = %d", m_position);
        knobChanged = 1;
    }

    return knobChanged;
}

//${AOs::Knob::Knob} .........................................................
Knob::Knob()
  : QActive(Q_STATE_CAST(&initial)),
    m_timeEvt(this, UPDATE_TIME_SIG, 0U)
{
    m_position = 0;
    m_lastPosition = 0;
    m_notifyCount = 0;
}

//${AOs::Knob::CreateOneShotTimer} ...........................................
void Knob::CreateOneShotTimer(uint32_t time) {
    //QTimeEvt_ctorX(&me->timeEvt, &me->super, UPDATE_TIME_SIG, 0U);
    //QTimeEvt_armX(&me->timeEvt, time, time);
    m_timeEvt.armX(time, 0);
}

//${AOs::Knob::StopTimer} ....................................................
void Knob::StopTimer() {
    //QTimeEvt_ctorX(&me->timeEvt, &me->super, UPDATE_TIME_SIG, 0U);
    //QTimeEvt_armX(&me->timeEvt, time, time);
    m_timeEvt.disarm();
}

//${AOs::Knob::SM} ...........................................................
Q_STATE_DEF(Knob, initial) {
    //${AOs::Knob::SM::initial}
    // Start periodic time to read knob position
    m_AO_Client = Q_EVT_CAST(ClientEvt)->client;
    consoleDisplay("Knob: starting\r\n");
    //CreateOneShotTimer(1000);
    return tran(&idle);
}

//${AOs::Knob::SM::running} ..................................................
Q_STATE_DEF(Knob, running) {
    QP::QState status_;
    switch (e->sig) {
        //${AOs::Knob::SM::running::KNOB}
        case KNOB_SIG: {
            // Received event for knob position from test
            // Increment motor position by motorIncrement attr for each knob position.
            int8_t knobPosition = Q_EVT_CAST(KnobEvt)->position;
            m_position = knobPosition;
            BSP_setPositionKnob(knobPosition);
            status_ = Q_RET_HANDLED;
            break;
        }
        default: {
            status_ = super(&top);
            break;
        }
    }
    return status_;
}

//${AOs::Knob::SM::running::idle} ............................................
Q_STATE_DEF(Knob, idle) {
    QP::QState status_;
    switch (e->sig) {
        //${AOs::Knob::SM::running::idle}
        case Q_ENTRY_SIG: {
            BSP_ToggleLed(BSP_MAX_LED);

            if ( m_notifyCount >= 1 )
            {
                CheckKnobChanged();
                // Always update client with knob position
                SendKnobEvent(m_position);
                m_notifyCount = 0;
            }

            CreateOneShotTimer(1000);
            status_ = Q_RET_HANDLED;
            break;
        }
        //${AOs::Knob::SM::running::idle::UPDATE_TIME}
        case UPDATE_TIME_SIG: {
            status_ = tran(&updatePosition);
            break;
        }
        default: {
            status_ = super(&running);
            break;
        }
    }
    return status_;
}

//${AOs::Knob::SM::running::updatePosition} ..................................
Q_STATE_DEF(Knob, updatePosition) {
    QP::QState status_;
    switch (e->sig) {
        //${AOs::Knob::SM::running::updatePosition}
        case Q_ENTRY_SIG: {
            // Toggle builtin green LED
            m_position = BSP_readKnob();
            m_notifyCount += 1;

            CreateOneShotTimer(1000);
            status_ = Q_RET_HANDLED;
            break;
        }
        //${AOs::Knob::SM::running::updatePosition::UPDATE_TIME}
        case UPDATE_TIME_SIG: {
            status_ = tran(&idle);
            break;
        }
        default: {
            status_ = super(&running);
            break;
        }
    }
    return status_;
}

} // namespace APP
//$enddef${AOs::Knob} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
