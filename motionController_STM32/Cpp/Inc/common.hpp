//$file${.::../Inc::common.hpp} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: MotionController.qm
// File:  ${.::../Inc::common.hpp}
//
// This code has been generated by QM 7.0.0 <www.state-machine.com/qm>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// Copyright (c) 2005 Quantum Leaps, LLC. All rights reserved.
//
//                 ____________________________________
//                /                                   /
//               /    GGGGGGG    PPPPPPPP   LL       /
//              /   GG     GG   PP     PP  LL       /
//             /   GG          PP     PP  LL       /
//            /   GG   GGGGG  PPPPPPPP   LL       /
//           /   GG      GG  PP         LL       /
//          /     GGGGGGG   PP         LLLLLLL  /
//         /___________________________________/
//
// SPDX-License-Identifier: GPL-3.0-or-later
//
// This generated code is open-source software licensed under the GNU
// General Public License (GPL) as published by the Free Software Foundation
// (see <https://www.gnu.org/licenses>).
//
// NOTE:
// The GPL does NOT permit the incorporation of this code into proprietary
// programs. Please contact Quantum Leaps for commercial licensing options,
// which expressly supersede the GPL and are designed explicitly for
// closed-source distribution.
//
// Quantum Leaps contact information:
// <www.state-machine.com/licensing>
// <info@state-machine.com>
//
//$endhead${.::../Inc::common.hpp} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#ifndef COMMON_H
#define COMMON_H

//$declare${Shared} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
namespace APP {

//${Shared::MotSignals} ......................................................
enum MotSignals : QP::QSignal {
    MOVE_TIME_SIG = QP::Q_USER_SIG,
    UPDATE_TIME_SIG,
    MOVE_SIG,
    FIND_LIMIT_SIG,
    HOME_SIG,
    MOVED_SIG,
    STOP_SIG,
    MOVE_ERROR_SIG,
    KNOB_SIG,
    SWITCH_CHANGED_SIG,
    CLIENT_SIG,
    SHOW_STATE_SIG
};

//${Shared::AO_Motor} ........................................................
extern QP::QActive * const AO_Motor;

//${Shared::MoveEvt} .........................................................
class MoveEvt : public QP::QEvt {
public:
    std::int16_t position;

public:
    constexpr MoveEvt(
        QP::QSignal sig,
        std::int16_t newPosition)
     : QEvt(sig),
       position(newPosition)
    {}
}; // class MoveEvt

//${Shared::AO_Knob} .........................................................
extern QP::QActive * const AO_Knob;

//${Shared::KnobEvt} .........................................................
class KnobEvt : public QP::QEvt {
public:
    std::int8_t position;

public:
    constexpr KnobEvt(
        QP::QSignal sig,
        std::int16_t newPosition)
     : QEvt(sig),
       position(newPosition)
    {}
}; // class KnobEvt

//${Shared::AO_MotionMgr} ....................................................
extern QP::QActive * const AO_MotionMgr;

//${Shared::MovedEvt} ........................................................
class MovedEvt : public QP::QEvt {
public:
    std::int16_t position;

public:
    constexpr MovedEvt(
        QP::QSignal sig,
        std::int16_t newPosition)
     : QEvt(sig),
       position(newPosition)
    {}
}; // class MovedEvt

//${Shared::SwitchEvt} .......................................................
class SwitchEvt : public QP::QEvt {
public:
    std::uint8_t state;

public:
    constexpr SwitchEvt(
        QP::QSignal sig,
        std::uint8_t newState)
     : QEvt(sig),
       state(newState)
    {}
}; // class SwitchEvt

//${Shared::AO_Switch} .......................................................
extern QP::QActive * const AO_Switch;

//${Shared::AppError} ........................................................
enum AppError : QP::QSignal {
    ERROR_NONE,
    ERROR_LIMIT_SWITCH,
    ERROR_STOP,
    ERROR_TIME_OUT
};

//${Shared::MoveErrorEvt} ....................................................
class MoveErrorEvt : public QP::QEvt {
public:
    std::uint8_t error;
    std::int16_t position;

public:
    constexpr MoveErrorEvt(
        QP::QSignal sig,
        std::int16_t moveError,
        std::uint16_t errorPosition)
     : QEvt(sig),
       error(moveError),
       position(errorPosition)
    {}
}; // class MoveErrorEvt

//${Shared::ClientEvt} .......................................................
class ClientEvt : public QP::QEvt {
public:
    QP::QActive *  client;

public:
    constexpr ClientEvt(
        QP::QSignal sig,
        QP::QActive * appClient)
     : QEvt(sig),
       client(appClient)
    {}
}; // class ClientEvt

//${Shared::AO_TerminalMot} ..................................................
extern QP::QActive * const AO_TerminalMot;

} // namespace APP
//$enddecl${Shared} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

#endif //COMMON_H
