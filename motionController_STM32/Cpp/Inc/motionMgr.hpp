//$file${.::../Inc::motionMgr.hpp} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: MotionController.qm
// File:  ${.::../Inc::motionMgr.hpp}
//
// This code has been generated by QM 7.0.0 <www.state-machine.com/qm>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// Copyright (c) 2005 Quantum Leaps, LLC. All rights reserved.
//
//                 ____________________________________
//                /                                   /
//               /    GGGGGGG    PPPPPPPP   LL       /
//              /   GG     GG   PP     PP  LL       /
//             /   GG          PP     PP  LL       /
//            /   GG   GGGGG  PPPPPPPP   LL       /
//           /   GG      GG  PP         LL       /
//          /     GGGGGGG   PP         LLLLLLL  /
//         /___________________________________/
//
// SPDX-License-Identifier: GPL-3.0-or-later
//
// This generated code is open-source software licensed under the GNU
// General Public License (GPL) as published by the Free Software Foundation
// (see <https://www.gnu.org/licenses>).
//
// NOTE:
// The GPL does NOT permit the incorporation of this code into proprietary
// programs. Please contact Quantum Leaps for commercial licensing options,
// which expressly supersede the GPL and are designed explicitly for
// closed-source distribution.
//
// Quantum Leaps contact information:
// <www.state-machine.com/licensing>
// <info@state-machine.com>
//
//$endhead${.::../Inc::motionMgr.hpp} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#ifndef MOTION_MGR_H
#define MOTION_MGR_H

#include <cstdint>

#include "qpcpp.hpp"             // QP/C++ real-time embedded framework

//$declare${AOs::MotionMgr} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
namespace APP {

//${AOs::MotionMgr} ..........................................................
class MotionMgr : public QP::QActive {
public:
    static MotionMgr inst;
    std::int16_t m_requestPosition;
    std::int16_t m_currentPosition;
    std::int16_t m_motorIncrement;
    std::int8_t m_knobPosition;
    QP::QActive * m_AO_Client;
    static const char* m_name;

private:
    QP::QTimeEvt m_timeEvt;

public:
    std::uint8_t m_error;
    std::uint8_t m_findingLimit;

private:
    void SendMoveEvent(uint16_t position);
    void SendFindLimitEvent();

public:
    MotionMgr();
    void ChangeKnobPosition(std::uint8_t knobPosition);

private:
    void CreateOneShotTimer(uint32_t time);
    void ReceiveMotorMovedEvt(QP::QEvt const * e);
    void ReceiveMotorErrorEvt(QP::QEvt const * e);

public:
    void MoveHome();
    void MoveToPosition(std::uint16_t position);
    void FindLimit(std::uint16_t position);

private:
    void SendStopEvent();
    void ReceiveSyncEvt(QP::QEvt const * e);
    void SendOffEvent();
    void ReceiveIllegalEvt(QP::QEvt const * e);

public:
    void TurnMotorOff();

protected:
    Q_STATE_DECL(initial);
    Q_STATE_DECL(idle);
    Q_STATE_DECL(moving);
}; // class MotionMgr

} // namespace APP
//$enddecl${AOs::MotionMgr} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

#endif
